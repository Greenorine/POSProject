@inject IDataService<Offer> OfferService

<PageHeader Title="@("Партнёрские предложения")">
    <PageHeaderExtra>
        <Button @onclick="_ => Open(false)">Добавить предложение</Button>
    </PageHeaderExtra>
</PageHeader>

<div style="padding: 24px">
    @if (!offers.Any())
    {
        <Empty/>
    }
    @foreach (var context in offers)
    {
        <Descriptions Title="@context.Title" Bordered>
            <DescriptionsItem Title="Название компании">@context.CompanyName</DescriptionsItem>
            <DescriptionsItem Title="Род деятельности">@context.Activity</DescriptionsItem>
            <DescriptionsItem Title="Способ получения">@context.Delivery</DescriptionsItem>
            <DescriptionsItem Title="Описание предложения">@context.Description</DescriptionsItem>
        </Descriptions>
        <br/>
        <Button @onclick="_ => { Offer = (Offer) context.Clone(); Open(true); }">Редактировать</Button>
        <Button Danger @onclick="@(async () => await DeleteOffer(context.Id))" Style="margin-bottom: 25px;">Удалить</Button>
        <br/>
    }
</div>

<Drawer Closable="true" Width="450" Visible="visible"
        Title='(isEdit ? "Изменение предложения" : "Добавление нового предложения")'
        OnClose="_ => Close()">
    <Form @ref="form"
          Model="@Offer"
          Layout="@FormLayout.Vertical"
          OnFinish="OnFinish"
          OnFinishFailed="OnFinishFailed"
          Style="width: 100%;"
          ValidateMode="@FormValidateMode.Rules"
          ValidateOnChange="true">
        <FormItem Label="Название" Rules=@(baseRules)>
            <Input @bind-Value="@context.Title"/>
        </FormItem>
        <FormItem Label="Название компании" Rules=@(baseRules)>
            <Input @bind-Value="@context.CompanyName"/>
        </FormItem>
        <FormItem Label="Род деятельности" Rules=@(baseRules)>
            <Input @bind-Value="@context.Activity"/>
        </FormItem>
        <FormItem Label="Описание" Rules=@(baseRules)>
            <AntDesign.TextArea @bind-Value="@context.Description"/>
        </FormItem>
        <FormItem Label="Способ получения" Rules=@(baseRules)>
            <AntDesign.TextArea @bind-Value="@context.Delivery"/>
        </FormItem>
        <FormItem>
            <Button HtmlType="submit">@(isEdit ? "Изменить" : "Добавить")</Button>
        </FormItem>
    </Form>

    @code {
        private FormValidationRule[] baseRules =
        {
            new() {Type = FormFieldType.String, Required = true, Message = "Поле обязательно"},
        };
    }

</Drawer>

<style>
    .ant-table,
    .ant-table-pagination.ant-pagination {
        padding-left: 24px;
        padding-right: 24px;
    }
</style>

@using System.Text.Json;
@using AntDesign.Internal
@using AntDesign.TableModels
@using Newtonsoft.Json
@using POSProject.Backend.Models
@using POSProject.Backend.Services
@using POSProject.Backend.Services.Interfaces

@code {
    private Offer Offer { get; set; } = new();
    
    private IForm form;

    private List<Offer> offers = new();

    protected override async Task OnInitializedAsync()
    {
        offers = await OfferService.GetAllAsync();
    }

    bool visible = false;
    bool isEdit = false;

    void Open(bool isEdit)
    {
        visible = true;
        this.isEdit = isEdit;
    }

    void Close()
    {
        visible = false;
        Offer = new Offer();
        form.Reset();
    }

    private async Task OnFinish(EditContext editContext)
    {
        var client = (Offer) ((Offer) editContext.Model).Clone();
        if (!isEdit)
        {
            await OfferService.InsertAsync(client);
            offers.Add(client);
        }
        else
        {
            await OfferService.UpdateAsync(client);
            offers[offers.FindIndex(x => x.Id == client.Id)] = client;
            isEdit = false;
        }
        Close();
        StateHasChanged();
    }

    private void OnFinishFailed(EditContext editContext)
    {
    }

    private async Task DeleteOffer(Guid id)
    {
        await OfferService.DeleteAsync(id);
        offers.RemoveAll(x => x.Id == id);
        StateHasChanged();
    }

}