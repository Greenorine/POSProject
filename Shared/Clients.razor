<PageHeader Title="@("Клиенты")">
    <PageHeaderExtra>
        <Button @onclick="_ => Open(false)">Добавить клиента</Button>
    </PageHeaderExtra>
</PageHeader>

<ClientDrawer
    IsVisible="@visible"
    IsEdit="@isEdit"
    ClientModel="@clientModel"
    OnFinish="OnFinish">
</ClientDrawer>

<Search OnSearch="SearchClients" Placeholder="Введите ФИО/Почту/Номер/Группу/Институт" WrapperStyle="width: 400px;" Style="margin-left: 25px; width: 368px;"/>
<Button @onclick="RefreshClients" Style="margin-left: 30px; margin-bottom: 25px;">
    Обновить
</Button>

<Table @ref="table"
       TItem="Client"
       DataSource="clients"
       Total="total"
       @bind-SelectedRows="selectedRows">
    <Selection Key="@(context.Id.ToString())"/>
    <Column @bind-Field="@context.FullName" Title="ФИО" Width="400" Sortable/>
    <Column @bind-Field="@context.Email" Title="Почта" Sortable/>
    <Column @bind-Field="@context.StudentId" Title="Студенческий" Sortable/>
    <Column @bind-Field="@context.UnionistId" Title="Проф. союзник" Sortable/>
    <Column @bind-Field="@context.GroupId" Title="Группа" Sortable/>
    <Column @bind-Field="@context.Institute" Title="Институт" Sortable/>
    <ActionColumn>
        <Button @onclick="_ => ProcessEdit(context)">
            <Icon Type="edit" Theme="outline"/>
        </Button>
    </ActionColumn>
</Table>

@if (selectedRows != null)
{
    <div style="margin-left: 25px; margin-right: 25px;">
        @foreach (var selected in selectedRows)
        {
            <Tag @key="selected" Closable OnClose="e => RemoveSelection(selected.FullName)">@selected.FullName</Tag>
        }

        @if (selectedRows.Any())
        {
            <br/>
            <br/>
            <Button Size="small" OnClick="@(e => { table.SetSelection(null); })">Отменить выбор</Button>
            <Button Danger Size="small" OnClick="DeleteSelectedRows">Удалить</Button>
        }
    </div>
}
<style>
    .ant-table,
    .ant-table-pagination.ant-pagination {
        padding-left: 24px;
        padding-right: 24px;
    }
</style>

@using AntDesign.Internal
@using AutoMapper
@using Microsoft.AspNetCore.Components
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using POSProject.Backend.Extensions
@using POSProject.Backend.Models
@using POSProject.Backend.Services.Interfaces

@code {

    [Inject]
    private IDataService<Client> ClientService { get; set; }

    [Inject]
    private IDataService<User> UserService { get; set; }

    [Inject]
    private IMapper Mapper { get; set; }

    private ClientModel clientModel = new();

    private ITable table;
    private int total = 0;

    IEnumerable<Client> selectedRows;

    private List<Client> clients = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshClients();
    }

    bool visible = false;
    bool isEdit = false;

    void Open(bool edit)
    {
        visible = true;
        isEdit = edit;
    }

    void Close()
    {
        visible = false;
        clientModel = new ClientModel();
    }

    private async Task OnFinish(EditContext editContext)
    {
        var model = (ClientModel) editContext.Model;
        var client = Mapper.Map<Client>(model);
        if (!isEdit)
        {
            await ClientService.InsertAsync(client);
            await UserService.InsertAsync(Mapper.Map<User>(model));
            clients.Add(client);
        }
        else
        {
            await ClientService.UpdateAsync(client);
            clients[clients.FindIndex(x => x.Id == model.Id)] = client;
            isEdit = false;
        }
        Close();
        StateHasChanged();
    }

    private void OnFinishFailed(EditContext editContext)
    {
    }

    private async Task<ClientModel> BuildClientModelAsync(Client context)
    {
        var model = Mapper.Map<ClientModel>(context);
        var user = await UserService.GetFirstOrDefaultByQueryAsync(x => x.Email == context.Email);
        model.Password = user.Password;
        return model;
    }

    private async Task ProcessEdit(Client context)
    {
        clientModel = await BuildClientModelAsync(context);
        Open(true);
    }

    public void RemoveSelection(string key)
    {
        var selected = selectedRows.Where(x => x.FullName != key).ToList();
        table.SetSelection(selected.Select(x => x.FullName).ToArray());
    }

    private async Task DeleteSelectedRows()
    {
        foreach (var selectedRow in selectedRows)
        {
            await ClientService.DeleteAsync(selectedRow.Id);
            var user = await UserService.GetFirstOrDefaultByQueryAsync(x => x.Email == selectedRow.Email);
            if (user != null)
                await UserService.DeleteAsync(user.Id);
            clients.RemoveAll(x => x.Id == selectedRow.Id);
            StateHasChanged();
        }
    }

    private async Task SearchClients(string search)
    {
        clients = await ClientService.GetByQueryAsync(x
            => (x.FullName.Contains(search) || x.Email.Contains(search) || x.StudentId.Contains(search)
                || x.UnionistId.Contains(search) || x.Institute.Contains(search) || x.GroupId.Contains(search)) && x.IsActive);
    }

    private async Task RefreshClients()
    {
        clients = await ClientService.GetAllAsync();
    }

}