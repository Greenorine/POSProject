@implements IDisposable
@inject AuthenticationStateProvider authenticationStateProvider
@layout EmptyLayout

@if (PageLoaded)
{
    <CascadingValue TValue="Task<AuthenticationState>" Value="@currentAuthenticationStateTask" ChildContent="@ChildContent"/>
}
else
{
    <Spin Indicator=antIcon />
}

@code {
    private Task<AuthenticationState> currentAuthenticationStateTask;
    private bool PageLoaded { get; set; }
    RenderFragment antIcon = @<Icon Type="loading" Theme="outline" Style="font-size: 100px; margin: auto" Spin />;
    /// <summary>
    /// The content to which the authentication state should be provided.
    /// </summary>
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return;
        
        PageLoaded = true;
        authenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
        currentAuthenticationStateTask = authenticationStateProvider
            .GetAuthenticationStateAsync();
        StateHasChanged();
    }

    private void OnAuthenticationStateChanged(Task<AuthenticationState> newAuthStateTask)
    {
        _ = InvokeAsync(() =>
        {
            currentAuthenticationStateTask = newAuthStateTask;
            StateHasChanged();
        });
    }

    void IDisposable.Dispose()
    {
        authenticationStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }

}